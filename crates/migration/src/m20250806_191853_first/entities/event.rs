//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "event")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    #[sea_orm(unique)]
    pub handle: String,
    pub cooldown: Option<u32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
#[allow(clippy::enum_variant_names)]
pub enum Relation {
    #[sea_orm(has_many = "super::event_admins::Entity")]
    EventAdmins,
    #[sea_orm(has_many = "super::event_categories::Entity")]
    EventCategories,
    #[sea_orm(has_many = "super::event_edition::Entity")]
    EventEdition,
}

impl Related<super::event_admins::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventAdmins.def()
    }
}

impl Related<super::event_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventCategories.def()
    }
}

impl Related<super::event_edition::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventEdition.def()
    }
}

impl Related<super::event_category::Entity> for Entity {
    fn to() -> RelationDef {
        super::event_categories::Relation::EventCategory.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::event_categories::Relation::Event.def().rev())
    }
}

impl Related<super::players::Entity> for Entity {
    fn to() -> RelationDef {
        super::event_admins::Relation::Players.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::event_admins::Relation::Event.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
