//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "event_edition")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub event_id: u32,
    pub name: String,
    pub subtitle: Option<String>,
    pub start_date: DateTime,
    pub banner_img_url: Option<String>,
    pub banner2_img_url: Option<String>,
    pub mx_id: Option<i32>,
    pub mx_secret: Option<String>,
    pub ttl: Option<u32>,
    pub save_non_event_record: i8,
    pub non_original_maps: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::event::Entity",
        from = "Column::EventId",
        to = "super::event::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Event,
    #[sea_orm(has_many = "super::event_edition_admins::Entity")]
    EventEditionAdmins,
    #[sea_orm(has_many = "super::event_edition_categories::Entity")]
    EventEditionCategories,
    #[sea_orm(has_many = "super::event_edition_maps::Entity")]
    EventEditionMaps,
    #[sea_orm(has_many = "super::event_edition_records::Entity")]
    EventEditionRecords,
}

impl Related<super::event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Event.def()
    }
}

impl Related<super::event_edition_admins::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventEditionAdmins.def()
    }
}

impl Related<super::event_edition_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventEditionCategories.def()
    }
}

impl Related<super::event_edition_maps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventEditionMaps.def()
    }
}

impl Related<super::event_edition_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventEditionRecords.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
