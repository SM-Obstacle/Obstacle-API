//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject)]
#[sea_orm(table_name = "checkpoint_times")]
#[graphql(name = "CheckpointTime")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub cp_num: u32,
    #[sea_orm(primary_key, auto_increment = false)]
    #[graphql(skip)]
    pub map_id: u32,
    #[sea_orm(primary_key, auto_increment = false)]
    #[graphql(skip)]
    pub record_id: u32,
    pub time: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::records::Entity",
        from = "Column::RecordId",
        to = "super::records::Column::RecordId",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Records,
}

impl Related<super::records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Records.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
