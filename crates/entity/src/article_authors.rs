//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "article_authors")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub article_id: u32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub author_id: u32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::article::Entity",
        from = "Column::ArticleId",
        to = "super::article::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Article,
    #[sea_orm(
        belongs_to = "super::players::Entity",
        from = "Column::AuthorId",
        to = "super::players::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Players,
}

impl Related<super::article::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Article.def()
    }
}

impl Related<super::players::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Players.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
