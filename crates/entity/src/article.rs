//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "article")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    #[sea_orm(unique)]
    pub slug: String,
    pub path: String,
    pub article_date: DateTime,
    pub hide: Option<i8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::article_authors::Entity")]
    ArticleAuthors,
}

impl Related<super::article_authors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArticleAuthors.def()
    }
}

impl Related<super::players::Entity> for Entity {
    fn to() -> RelationDef {
        super::article_authors::Relation::Players.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::article_authors::Relation::Article.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
